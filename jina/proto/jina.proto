syntax = "proto3";
import "google/protobuf/timestamp.proto";

package jina;

/**
 * Represents the a (quantized) numpy ndarray
 */
message NdArray {
    // the actual array data, in bytes
    bytes raw_bytes = 1;

    // the shape (dimensions) of the array
    repeated uint32 shape = 2;

    // the data type of the array
    string dtype = 3;

    enum QuantizationMode {
        NONE = 0; // no quantization is performed, stored in the original ``dtype``
        FP16 = 1; // 2x smaller if dtype is set to FP32
        UINT8 = 2; // 4x smaller but lossy when dtype is FP32
    }

    // quantization mode
    QuantizationMode quantization = 4;

    float max_val = 5; // the max value of the ndarray
    float min_val = 6; // the min value of the ndarray
    float scale = 7; // the scale of the ndarray
    string original_dtype = 8; // the original dtype of the array
}

/**
 * Represents an unary match result
 */
message ScoredResult {

    /**
     * Represents the score of a match
     */
    message Score {
        float value = 1; // value
        string op_name = 2; // the name of the operator/score function
        string description = 3; // text description of the score
        repeated Score operands = 4; // the score can be nested
    }

    oneof body {
        Chunk match_chunk = 1; // the matched chunk
        Document match_doc = 2; // the matched document
    }
    Score score = 3; // the score of this match
}

/**
 * Represents a Chunk
 */
message Chunk {
    uint32 doc_id = 1; // the document ID of this chunk, universally unique
    uint32 chunk_id = 2; // the chunk ID, universally unique

    oneof content {
        // the original text of the chunk (only apply to the text document)
        string text = 3;

        // the original ndarray of the chunk (apply to the image/video document)
        NdArray blob = 4;

        // raw bytes of chunk
        bytes raw_bytes = 5;
    }

    // the embedding array of this chunk
    NdArray embedding = 6;

    // the offset of this chunk in the current document
    uint32 offset = 7;

    // the weight of this chunk
    float weight = 8;

    // the total number of chunks in the current document
    uint32 length = 9;

    // some binary meta information of this chunk in bytes
    bytes meta_info = 10;

    // the top-k matched chunks
    repeated ScoredResult topk_results = 11;
}

/**
 * Represents a Document
 */
message Document {
    // The unique document ID
    uint32 doc_id = 1;

    // the raw binary content of this document, which often represents the original document when comes into jina
    bytes raw_bytes = 3;

    // list of the chunks of this document
    repeated Chunk chunks = 4;

    // the weight of this document
    float weight = 5;

    // total number of chunks in this document
    uint32 length = 6;

    // some binary meta information of this chunk in bytes
    bytes meta_info = 7;

    // the top-k matched chunks
    repeated ScoredResult topk_results = 8;
}

/**
 * Represents a Envelope, a part of the ``Message``.
 */
message Envelope {
    // unique id of the sender of the message
    string sender_id = 1;

    // unique id of the receiver of the message, only used in router-dealer pattern
    string receiver_id = 2;

    // unique id of the request
    uint32 request_id = 3;

    // timeout in second until this message is droped
    uint32 timeout = 4;

    /**
     * Represents a the route paths of this message
     */
    message Route {
        string pod = 1; // the name of the BasePod
        string pod_id = 2; // the id of the BasePod
        google.protobuf.Timestamp start_time = 3; // receiving time
        google.protobuf.Timestamp end_time = 4; // sending (out) time
    }
    repeated Route routes = 5; // a list of routes this message goes through

    /**
     * Represents a the version information
     */
    message Version {
        string jina = 1; // jina's version
        string proto = 2; // protobuf's version
        string vcs = 3; // vcs's version
    }

    Version version = 6; // version info

    enum Status {
        SUCCESS = 0; // success
        ERROR = 1; // error
        PENDING = 2; // there are pending messages, more messages are followed
        READY = 3; // ready to use
    }

    Status status = 7; // status info
}

/**
 * Represents a Message
 */
message Message {
    Envelope envelope = 1; // the envelope of the message, used internally in jina, dropped when returning to client
    Request request = 2; // the request body
}

/**
 * Represents a Request
 */
message Request {

    uint32 request_id = 1; // the unique ID of this request. Multiple requests with the same ID will be gathered

    oneof body {
        TrainRequest train = 2; // a train request
        IndexRequest index = 3; // an index request
        SearchRequest search = 4; // a search request
        ControlRequest control = 5; // a control request
    }

    /**
     * Represents a train request
     */
    message TrainRequest {
        repeated Document docs = 1; // a list of Documents to train
        bool flush = 2; // if True then do actual training, otherwise only collect all documents but not do training.
    }

    /**
     * Represents an index request
     */
    message IndexRequest {
        repeated Document docs = 1; // a list of Documents to index
    }

    /**
     * Represents a search request
     */
    message SearchRequest {
        repeated Document docs = 1; // a list of Documents to query
        uint32 top_k = 2; // the number of most related results to return
    }

    /**
     * Represents a control request used to control the BasePod
     */
    message ControlRequest {
        enum Command {
            TERMINATE = 0; // shutdown the BasePod
            STATUS = 1; // check the status of the BasePod
            DRYRUN = 2; // passing this pod without take any action, and send the request to the next pod
            IDLE = 3; // used in ROUTER-DEALER pattern, tells the router that the dealer is idle
        }
        Command command = 1; // the control command

        map<string, string> args = 2; // the pea arguments, useful in STATUS
    }
}

message SpawnRequest {

    // Spawn a pea remotely, requires args of a pea
    message PeaSpawnRequest {
        repeated string args = 1; // a list of args string for BasePea
    }

    // Spawn a pod remotely, requires args of a pea
    message PodSpawnRequest {
        repeated string args = 1; // a list of args string for BasePod
    }

    // Spawn a parsed pod remotely, requires parsed pod structure
    message MutablepodSpawnRequest {
        PeaSpawnRequest head = 1; // a list of args string for the head BasePea
        PeaSpawnRequest tail = 2; // a list of args string for the tail BasePea
        repeated PeaSpawnRequest peas = 3; // a list of args string for the Peas
    }

    oneof body {
        PeaSpawnRequest pea = 1;
        PodSpawnRequest pod = 2; // send a PodSpawnRequest and it will switch to PodDictSpawnRequest as returns
        MutablepodSpawnRequest mutable_pod = 3;
    }

    enum Status {
        SUCCESS = 0; // success
        ERROR_OTHER = 1; // other error
        ERROR_DUPLICATE = 2; // already a exisiting pea/pod running
        ERROR_NOTALLOWED = 3; // not allowed to open pea/pod remotely
    }

    string log_record = 4; // one line of the log record
    Status status = 5; // status info
}

/**
 * jina gRPC service.
 */
service JinaRPC {
    // Pass in a Request and a filled Request with topk_results will be returned.
    rpc Call (stream Request) returns (stream Request) {
    }

    rpc CallUnary (Request) returns (Request) {
    }

    // Pass in a Request and a filled Request will be returned.
    rpc Spawn (SpawnRequest) returns (stream SpawnRequest) {
    }
}

